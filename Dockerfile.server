# Node.js 22 LTS Alpine イメージを使用（軽量）
FROM node:22-alpine AS base

# 作業ディレクトリを設定
WORKDIR /app

# workspace設定用のステージ（ルートのpackage.jsonとlock fileを使用）
FROM base AS workspace-setup

# ルートのpackage.jsonとlockファイルをコピー
COPY package.json package-lock.json ./
COPY packages/shared/package.json ./packages/shared/
COPY packages/server/package.json ./packages/server/

# workspaceの依存関係をインストール
RUN npm ci

# 共有パッケージビルド用のステージ
FROM workspace-setup AS shared-build

# 共有パッケージソースをコピーしてビルド
COPY packages/shared ./packages/shared
RUN npm run build --workspace=packages/shared

# サーバービルド用のステージ
FROM workspace-setup AS server-build

# 共有パッケージの成果物をコピー
COPY --from=shared-build /app/packages/shared/dist ./packages/shared/dist

# サーバーソースコードをコピー
COPY packages/server ./packages/server

# サーバーをビルド
RUN npm run build --workspace=packages/server

# 本番用イメージ
FROM node:22-alpine AS production

# 非rootユーザーを作成
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# 作業ディレクトリを設定
WORKDIR /app

# 本番用workspaceのセットアップ
COPY package.json package-lock.json ./
COPY packages/shared/package.json ./packages/shared/
COPY packages/server/package.json ./packages/server/

# 本番依存関係のみインストール
RUN npm ci --only=production && npm cache clean --force

# ビルド済みファイルをコピー
COPY --from=shared-build /app/packages/shared/dist ./packages/shared/dist
COPY --from=server-build /app/packages/server/dist ./packages/server/dist

# 権限を設定
RUN chown -R nodejs:nodejs /app
USER nodejs

# ポートを公開
EXPOSE 3000

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "const http = require('http'); const options = { hostname: 'localhost', port: 3000, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"

# アプリケーション起動（workspaceコマンドを使用）
CMD ["npm", "start", "--workspace=packages/server"]
